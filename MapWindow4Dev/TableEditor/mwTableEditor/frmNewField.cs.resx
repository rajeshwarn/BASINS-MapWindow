<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        AAD8HwAA/B8AAP4PAAD+DwAA/x8AAP//AAA=
</value>
  </data>
</root>